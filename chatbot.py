"""
Chatbot for the Urban Intelligence Platform
"""
import os
import requests
import json
from datetime import datetime
import random
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # Changed to DEBUG for more detailed logs

class UrbanChatbot:
    def __init__(self):
        self.api_key = os.environ.get('DEEPSEEK_API_KEY')

        # Respostas locais para quando a API falhar
        self.fallback_responses = {
            "qualidade_ar": "De acordo com os √∫ltimos dados dos sensores, a qualidade do ar est√° dentro dos padr√µes normais. Voc√™ pode verificar dados detalhados no painel de monitoramento.",
            "trafego": "O tr√°fego est√° fluindo normalmente nas principais vias. Recomendo verificar o mapa de calor de tr√°fego para informa√ß√µes em tempo real.",
            "alagamento": "N√£o h√° alertas de alagamento no momento. Os n√≠veis de chuva est√£o dentro do normal.",
            "temperatura": "A temperatura atual est√° dentro da m√©dia para esta √©poca do ano. Consulte o painel de monitoramento para dados espec√≠ficos por regi√£o.",
            "default": "Desculpe, estou com dificuldade para acessar algumas informa√ß√µes no momento. Por favor, consulte o painel de monitoramento para dados em tempo real ou tente reformular sua pergunta."
        }

        # Palavras-chave para identificar t√≥picos
        self.topic_keywords = {
            "qualidade_ar": ["ar", "polui√ß√£o", "qualidade", "respirar", "aqi"],
            "trafego": ["tr√¢nsito", "tr√°fego", "congestionamento", "via", "rua", "avenida"],
            "alagamento": ["chuva", "alagamento", "enchente", "√°gua", "inunda√ß√£o"],
            "temperatura": ["temperatura", "calor", "frio", "clima", "tempo"]
        }

        # Mensagens de boas-vindas
        self.welcome_messages = [
            "Ol√°! Sou o assistente virtual de Mossor√≥. Posso ajudar com informa√ß√µes sobre:"
            "\n‚Ä¢ Qualidade do ar e condi√ß√µes ambientais"
            "\n‚Ä¢ Situa√ß√£o do tr√¢nsito em tempo real"
            "\n‚Ä¢ Alertas de alagamentos"
            "\n‚Ä¢ Projetos smart city em andamento"
            "\n\nComo posso ajudar?",

            "Oi! Sou especialista em dados urbanos de Mossor√≥. Posso informar sobre:"
            "\n‚Ä¢ Monitoramento ambiental"
            "\n‚Ä¢ Condi√ß√µes de tr√°fego"
            "\n‚Ä¢ Alertas meteorol√≥gicos"
            "\n‚Ä¢ Iniciativas de cidade inteligente"
            "\n\nO que voc√™ gostaria de saber?"
        ]

        # T√≥picos sugeridos com perguntas exemplo
        self.suggested_topics = {
            'qualidade_ar': {
                'titulo': 'üå°Ô∏è Qualidade do Ar',
                'perguntas': [
                    "Como est√° a qualidade do ar no Centro hoje?",
                    "Quais √°reas t√™m melhor qualidade do ar?",
                    "Existe algum alerta de polui√ß√£o?"
                ]
            },
            'trafego': {
                'titulo': 'üöó Tr√¢nsito',
                'perguntas': [
                    "Como est√° o tr√¢nsito na regi√£o central?",
                    "Quais vias est√£o congestionadas?",
                    "Qual o melhor hor√°rio para evitar congestionamentos?"
                ]
            },
            'alagamentos': {
                'titulo': 'üíß Alagamentos',
                'perguntas': [
                    "Existe risco de alagamento hoje?",
                    "Quais √°reas est√£o em alerta?",
                    "Como est√° o n√≠vel de chuva nas √∫ltimas horas?"
                ]
            },
            'projetos': {
                'titulo': 'üèóÔ∏è Projetos Smart City',
                'perguntas': [
                    "Quais projetos smart city est√£o em andamento?",
                    "Como funcionam os sensores urbanos?",
                    "Quando ser√£o instaladas novas c√¢meras inteligentes?"
                ]
            }
        }

        # Respostas r√°pidas para intera√ß√µes comuns
        self.quick_responses = {
            'saudacao': [
                "Ol√°! Sou o assistente virtual de Mossor√≥. Como posso ajudar?",
                "Oi! Estou aqui para ajudar com informa√ß√µes sobre nossa cidade inteligente.",
                "Bem-vindo! Como posso auxiliar voc√™ hoje?"
            ],
            'agradecimento': [
                "Por nada! Estou sempre aqui para ajudar a tornar Mossor√≥ mais inteligente.",
                "Dispon√≠vel sempre que precisar! Juntos estamos construindo uma cidade melhor.",
                "√â um prazer ajudar! Continue acompanhando as novidades da nossa smart city."
            ],
            'despedida': [
                "At√© mais! Continuarei monitorando nossa cidade 24/7.",
                "At√© a pr√≥xima! N√£o deixe de acompanhar os projetos de transforma√ß√£o digital.",
                "Tchau! Volte sempre para saber mais sobre Mossor√≥."
            ],
            'erro': [
                "Desculpe, estou com algumas limita√ß√µes t√©cnicas no momento. Posso tentar ajudar com informa√ß√µes b√°sicas sobre a cidade.",
                "Estou passando por uma atualiza√ß√£o. Por favor, tente novamente em alguns minutos.",
                "Minhas respostas est√£o limitadas no momento, mas posso ajudar com informa√ß√µes do painel de monitoramento."
            ]
        }

    def identify_topic(self, text: str) -> str:
        """Identifica o t√≥pico principal da pergunta"""
        text = text.lower()
        for topic, keywords in self.topic_keywords.items():
            if any(keyword in text for keyword in keywords):
                return topic
        return "default"

    def get_fallback_response(self, text: str) -> str:
        """Retorna uma resposta local baseada no t√≥pico identificado"""
        topic = self.identify_topic(text)
        return self.fallback_responses.get(topic, self.fallback_responses["default"])

    def get_topic_suggestions(self):
        """Retorna sugest√µes de t√≥picos e perguntas"""
        return self.suggested_topics

    def get_welcome_message(self):
        """Retorna mensagem de boas-vindas aleat√≥ria"""
        return random.choice(self.welcome_messages)

    def get_response(self, user_input):
        """Generate response based on user input"""
        if not user_input.strip():
            return "Por favor, digite sua mensagem."

        try:
            # Detectar sauda√ß√µes
            greetings = ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite']
            if any(greeting in user_input.lower() for greeting in greetings):
                return random.choice(self.quick_responses['saudacao'])

            # Detectar agradecimentos
            thanks = ['obrigado', 'obrigada', 'valeu', 'agrade√ßo']
            if any(thank in user_input.lower() for thank in thanks):
                return random.choice(self.quick_responses['agradecimento'])

            # Detectar despedidas
            goodbyes = ['tchau', 'at√©', 'adeus', 'falou']
            if any(bye in user_input.lower() for bye in goodbyes):
                return random.choice(self.quick_responses['despedida'])

            try:
                # API request setup
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': f'Bearer {self.api_key}'
                }

                # Create system prompt
                system_prompt = """Voc√™ √© o C√©rebro Urbano, assistente virtual especializado em Mossor√≥.
                Forne√ßa respostas diretas e pr√°ticas sobre:
                1. Qualidade do ar e condi√ß√µes ambientais
                2. Situa√ß√£o do tr√¢nsito em tempo real
                3. Alertas de alagamentos
                4. Projetos smart city

                Use dados em tempo real quando dispon√≠veis e mantenha um tom informativo e prestativo."""

                # Create API payload
                payload = {
                    'model': 'deepseek-chat',
                    'messages': [
                        {
                            'role': 'system',
                            'content': system_prompt
                        },
                        {
                            'role': 'user',
                            'content': user_input
                        }
                    ],
                    'temperature': 0.7,
                    'max_tokens': 500
                }

                # Make API request
                response = requests.post(
                    'https://api.deepinfra.com/v1/openai/chat/completions',
                    headers=headers,
                    json=payload,
                    timeout=10
                )

                # Handle API response
                if response.status_code == 200:
                    return response.json()['choices'][0]['message']['content']
                else:
                    logger.error(f"API Error: {response.status_code} - {response.text}")
                    # Fallback to local response system
                    return self.get_fallback_response(user_input)

            except requests.exceptions.RequestException as e:
                logger.error(f"API Request Error: {str(e)}")
                return self.get_fallback_response(user_input)

        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            return random.choice(self.quick_responses['erro'])